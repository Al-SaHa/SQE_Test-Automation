Architectural and component level modularity requirements

EditorConfig:
EditorConfig can help you maintain consistent coding styles for multiple developers on the same project across various editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format, adhere to those styles, and then share them with others. EditorConfig files are easy for humans to read and nice for version control systems.

When a file is opened, EditorConfig looks for .editorconfig files in the directory and all of its parent directories. The search will stop if the root directory is reached or if a .editorconfig file with root=true is found. These files are read top to bottom, and the most recent rule found takes precedence.

I explored many react based stores and found almost all of them using .editorconfig. However, our project ‘React storefront’ does not contain a .editorconfig file.

In Evengreen & React Bootstrap open-source project:
These both projects have a .editorconfig file which can easily be found in their github repositories. Both files have the same formatting. They use a special character * which matches any string of characters. However, no new character is introduced in these files. Neither of them use the “unset” option in their configured settings.

Utility functions
The term “utility” has no precise definition. A piece of code can be called a utility if it seems too small to be considered as a separate application, and too general-purpose to be considered as part of a particular program. Most utilities resemble the functions and macros that Lisp has already. In fact, many of Common Lisp’s built-in operators began life as utilities. The function remove-if-not, which collects all the elements of a list satisfying some predicate, was defined by individual programmers for years before it became a part of Common Lisp.

Utility functions are actually source code which are reusable. It fulfills the requirement of ‘don’t wire in behavior’. For example, instead of defining two functions which do the same thing but for one or two constants, define a single function and pass the constants as arguments.

In React Storefront open-source project:
React storefront has an util folder where all the functions which are used in this project as utility functions were available. The format of each file is filename.js and one file contains one function export default function is how these functions are defined.
