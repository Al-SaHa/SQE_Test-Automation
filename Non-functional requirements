Quality Attributes

Architectural and component level modularity requirements

EditorConfig:
EditorConfig can help you maintain consistent coding styles for multiple developers on the same project across various editors and IDEs. The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format, adhere to those styles, and then share them with others. EditorConfig files are easy for humans to read and nice for version control systems.

When a file is opened, EditorConfig looks for .editorconfig files in the directory and all of its parent directories. The search will stop if the root directory is reached or if a .editorconfig file with root=true is found. These files are read top to bottom, and the most recent rule found takes precedence.

I explored many react based stores and found almost all of them using .editorconfig. However, our project ‘React storefront’ does not contain a .editorconfig file.

In Evengreen & React Bootstrap open-source project:
These both projects have a .editorconfig file which can easily be found in their github repositories. Both files have the same formatting. They use a special character * which matches any string of characters. However, no new character is introduced in these files. Neither of them use the “unset” option in their configured settings.

Utility functions
The term “utility” has no precise definition. A piece of code can be called a utility if it seems too small to be considered as a separate application, and too general-purpose to be considered as part of a particular program. Most utilities resemble the functions and macros that Lisp has already. In fact, many of Common Lisp’s built-in operators began life as utilities. The function remove-if-not, which collects all the elements of a list satisfying some predicate, was defined by individual programmers for years before it became a part of Common Lisp.

Utility functions are actually source code which are reusable. It fulfills the requirement of ‘don’t wire in behavior’. For example, instead of defining two functions which do the same thing but for one or two constants, define a single function and pass the constants as arguments.

In React Storefront open-source project:
React storefront has an util folder where all the functions which are used in this project as utility functions were available. The format of each file is filename.js and one file contains one function export default function is how these functions are defined.


Performance optimizations

Lazy Hydration
Hydration is making server-side rendered HTML interactive without completely re-rendering it from scratch. The main goal of hydration is rendering HTML server-side, and hydrating it on the client-side, is to deliver HTML to the browser as fast as possible. The hydration process makes the HTML interactive as if it were rendered client-side. Lazy Hydration is triggering hydration at a later point and not immediately after loading the site.This helps in improving the performance.

In React Storefront open-source project:
React Storefront uses lazy hydration to increase the performance of the store. After exploring I found a file i.e. LazyHydrate.js in the src folder. On further exploration, the file allows different components to hydrate. It not only specifies the hydration for different components but it also specifies some triggers on them so HTML can be delivered from server-side to client-side in minimum possible time.

Cache
Cache is the temporary storage location and caching is the process of storing copies of files in a cache, so that they can be accessed more quickly. Technically, a cache is any temporary storage location for copies of files or data.To shorten page load time browser's cache most of the content that appears on the webpage.Web browsers cache HTML files, JavaScript, and images in order to load websites more quickly. They save a copy of these files on the device’s hard drive. This way, the next time the user loads the page, most of the content is already stored locally and the page will load much more quickly.

In React Storefront open-source project:
In React Storefront, you can cache any route in routes.js using the cache function provided to your route callback.To controls how a response is cached in the browser we use browser config.The browser config accepts two values:
maxAgeSeconds - 
serviceWorkerSeconds -
You can also set a cached response's time to live at the edge using the maxAgeSeconds and staleWhileRevalidateSeconds options.To configure Layer to store multiple variants for any given route you can specify a custom cache key.

- Explore and document different security requirements (e.g. Secrets management,
Application Firewalls, SAST, In-built security, security standard compliances, etc)
 Security requirements 

Security standard compliances
Asking the following points may be necessary in open-source projects: What type of licensing agreement (i.e., Creative Commons, Apache Foundation) is the use of materials covered by? Who will own what content (content created by you, the outsourced party, or both)? This can include intellectual property rights and usage rights. How secure are the design, coding, testing practices? Is there an agreed after/approach for analyzing a security application as an end product? After agreement on a minimum acceptable level of privacy quality, who owns responsibility if an app was not tested adequately? What would be acceptable evidence that sufficient testing has been applied to ensure exposure to malicious content and any other unintentional errors in production from the delivery process? These points have contractual obligations for monitoring development processes and controls. Will you get access to data about what went into a build environment used for production? You'll need to document all information related to this process for future audit purposes.In open source projects all points should be clearly followed.


Reliability requirements

Features
Site reliability engineering is an emerging movement that combines many different approaches to create a more resilient business. SRE looks at what's happening on every level, from the hardware of servers to team morale. Everything is examined and improved to make your business better, operating more reliably. In open source projects, reliability is a feature, and in fact your most important feature, as customers simply expect that things ‘just work’. 

In React PWA reference storefront open-source project:
To improve the reliability of your system in a meaningful way, you need to determine which user journeys are more critical, through their features. This will allow you to create service level indicators that reflect where reliability issues have the greatest business impact.

Cloud-based and Serverless deployments
Serverless is a cloud-based code execution model to build your cloud-based application without managing infrastructure. It eliminates the need for routine tasks like security patches, capacity management, load balancing, scaling, etc. Servers are simply eliminated from the app development since they are managed by the cloud service providers. Almost all applications all over the world are now cloud based and developers do not require to deal with the servers to run their applications. Cloud-based and serverless deployments is an ultimate way to increase the reliability of your application. Applications does not work if they are not managed by servers or if they are not cloud-based applications.


Process requirements

Issues
Issues management is a process that helps identify and resolve future problems before they arise. It also consists of a strategic function, which coordinates an effort to clarify a position in order to avoid, if possible, an issue from evolving into a crisis. Issues management encompasses the potential, emerging, and current stages of an issue's evolution before it reaches the crisis stage. Issues are only considered crises when certain skill sets are necessary.

Open-source contribution requirements for developers
Open source projects are made up of publicly accessible source code with a permissive license. Most open-source projects are created by people with all skill levels--not just coding. It's not rare to see contributions from people who can write, translate languages, or even fix a typo! As these small contributions from different people accumulate, the project will make progress. If we take all these disparate pieces and assemble them into one whole, suddenly you have something great.


Documentation needs

User Manual 
A user manual is a document that provides instructions on how to use a product. It is usually written by the product's development team and is an important part of the development process. The user manual should be clear, concise, and easy to understand. It should also be helpful for users who are new to the product.

In Create a new React App open-source project:
When we open the documentation of Create a new React App. The first thing which we find is a step by step guide on how to set up the react on your store and how to download node.js on the computer which you are going to use to create a new app. It also provides guidance on where to add what code and where not to. User manuals are important in such type of open source softwares and projects.

README.md
A readme.md file is a simple text document that provides basic information about installation guides or general documentation for a project. GitHub, GitLab, and BitBucket all use the readme.md file as a descriptor for their repositories. 

References:
https://editorconfig.org/#file-location
https://redirect.cs.umbc.edu/courses/331/resources/lisp/onLisp/04utilityFunctions.pdf
https://www.pluralsight.com/guides/importing-utility-functions-in-reactjs
https://markus.oberlehner.net/blog/partial-hydration-concepts-lazy-and-active/
https://www.cloudflare.com/learning/cdn/what-is-caching/#:~:text=Caching%20is%20the%20process%20of,in%20reference%20to%20Internet%20technologies.
https://docs.reactstorefront.io/guides/layer0_caching
https://relevant.software/blog/serverless-architecture/
http://alexanderps.com/blog/blog-issuelifecycle.html
https://reactjs.org/docs/create-a-new-react-app.html
https://medium.com/@saumya.ranjan/how-to-write-a-readme-md-file-markdown-file-20cb7cbcd6f



